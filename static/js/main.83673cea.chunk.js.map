{"version":3,"sources":["redux-toolkit/auth/authSelectors.js","redux-toolkit/auth/authOperations.js","redux-toolkit/auth/authActions.js","redux-toolkit/contacts/contactsActions.js","redux-toolkit/auth/authReducers.js","redux-toolkit/contacts/contactsReducers.js","redux-toolkit/store.js","routes.js","Components/Header/Authorization/Authorization.js","Components/Header/UserMenu/UserMenu.js","Components/Header/Header.js","Components/PrivateRoute.js","Components/PublicRoute.js","App.js","index.js"],"names":["getUserEmail","state","auth","user","email","getIsAuthenticated","isAuthenticated","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","authActions","post","then","data","catch","error","message","login","logout","getCurrentUser","getState","persistedToken","get","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","changeFilter","initialUserState","name","createReducer","actions","payload","action","loading","combineReducers","itemsInitialState","items","contactsActions","filter","item","id","errorInitialState","contacts","authPersistConfig","key","storage","whitelist","reducer","persistReducer","authReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","console","log","configureStore","devTools","process","persistor","persistStore","routes","home","moveTo","navLinkActiveStyle","className","to","activeStyle","UserMenu","useSelector","useDispatch","type","onClick","withRouter","location","pathname","from","color","exact","PrivateRoute","Component","component","redirectTo","routeProps","render","props","PublicRoute","restricted","HomePage","lazy","RegisterPage","LoginPage","ContactsPage","App","useEffect","fallback","path","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83673cea.chunk.js","sourcesContent":["export const getUserEmail = state => state.auth.user.email;\r\nexport const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n","import axios from 'axios';\r\nimport * as authActions from './authActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set: token => (axios.defaults.headers.common.Authorization = `Bearer ${token}`),\r\n  unset: () => (axios.defaults.headers.common.Authorization = ''),\r\n};\r\n\r\n// POST @ /users/signup\r\n// body (credentials): { name, email, password }\r\n// После успешной регистрации добавляем токен в HTTP-заголовок\r\nexport const register = credentials => dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  axios\r\n    .post('/users/signup', credentials)\r\n    .then(({ data }) => {\r\n      token.set(data.token);\r\n      dispatch(authActions.registerSuccess(data));\r\n    })\r\n    .catch(error => dispatch(authActions.registerError(error.message)));\r\n};\r\n\r\n// POST @ /users/login\r\n// body (credentials): { email, password }\r\n// После успешного логина добавляем токен в HTTP-заголовок\r\nexport const login = credentials => dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  axios\r\n    .post('/users/login', credentials)\r\n    .then(({ data }) => {\r\n      token.set(data.token);\r\n      dispatch(authActions.loginSuccess(data));\r\n    })\r\n    .catch(error => dispatch(authActions.loginError(error.message)));\r\n};\r\n\r\n// POST @ /users/logout\r\n// headers: { Authorization: `Bearer ${token}` }\r\n// После успешного логаута удаляем токен из HTTP-заголовка\r\nexport const logout = () => dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  axios\r\n    .post('/users/logout')\r\n    .then(() => {\r\n      token.unset();\r\n      dispatch(authActions.logoutSuccess());\r\n    })\r\n    .catch(error => dispatch(authActions.logoutError(error.message)));\r\n};\r\n\r\n// GET @ /users/current\r\n// headers: { Authorization: `Bearer ${token}` }\r\n// 1. Забираем токен из стейта через getState()\r\n// 2. Если токена нет, выходим, не выполняя никаких операций\r\n// 3. Если токен есть, добавляем его в HTTP-заголовок и выполняем операцию\r\nexport const getCurrentUser = () => (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (persistedToken) {\r\n    token.set(persistedToken);\r\n\r\n    dispatch(authActions.getCurrentUserRequest());\r\n\r\n    axios\r\n      .get('/users/current')\r\n      .then(({ data }) => dispatch(authActions.getCurrentUserSuccess(data)))\r\n      .catch(error => dispatch(authActions.getCurrentUserError(error.message)));\r\n  }\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const registerRequest = createAction('@auth/registerRequest');\r\nexport const registerSuccess = createAction('@auth/registerSuccess');\r\nexport const registerError = createAction('@auth/registerError');\r\n\r\nexport const loginRequest = createAction('@auth/loginRequest');\r\nexport const loginSuccess = createAction('@auth/loginSuccess');\r\nexport const loginError = createAction('@auth/loginError');\r\n\r\nexport const logoutRequest = createAction('@auth/logoutRequest');\r\nexport const logoutSuccess = createAction('@auth/logoutSuccess');\r\nexport const logoutError = createAction('@auth/logoutError');\r\n\r\nexport const getCurrentUserRequest = createAction('@auth/getCurrentUserRequest');\r\nexport const getCurrentUserSuccess = createAction('@auth/getCurrentUserSuccess');\r\nexport const getCurrentUserError = createAction('@auth/getCurrentUserError');\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContactRequest = createAction('@contacts/addItemRequest');\r\nexport const addContactSuccess = createAction('@contacts/addItemSuccess');\r\nexport const addContactError = createAction('@contacts/addItemError');\r\n\r\nexport const deleteContactRequest = createAction('@contacts/deleteItemRequest');\r\nexport const deleteContactSuccess = createAction('@contacts/deleteItemSuccess');\r\nexport const deleteContactError = createAction('@contacts/deleteItemError');\r\n\r\nexport const fetchContactsRequest = createAction('@contacts/fetchItemsRequest');\r\nexport const fetchContactsSuccess = createAction('@contacts/fetchItemsSuccess');\r\nexport const fetchContactsError = createAction('@contacts/fetchItemsError');\r\n\r\nexport const changeFilter = createAction('@filter/change');\r\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\n// Actions\r\nimport * as actions from './authActions';\r\n\r\nconst initialUserState = { name: '', email: '' };\r\nconst user = createReducer(initialUserState, {\r\n  [actions.registerSuccess]: (state, { payload }) => payload.user,\r\n  [actions.loginSuccess]: (state, { payload }) => payload.user,\r\n  [actions.logoutSuccess]: (state, action) => initialUserState,\r\n  [actions.getCurrentUserSuccess]: (state, { payload }) => payload,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [actions.registerSuccess]: () => true,\r\n  [actions.loginSuccess]: () => true,\r\n  [actions.logoutSuccess]: () => false,\r\n  [actions.getCurrentUserSuccess]: () => true,\r\n});\r\n\r\nconst tokenInitialState = null;\r\nconst token = createReducer(tokenInitialState, {\r\n  [actions.registerSuccess]: (state, { payload }) => payload.token,\r\n  [actions.loginSuccess]: (state, { payload }) => payload.token,\r\n  [actions.logoutSuccess]: () => tokenInitialState,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [actions.registerRequest]: () => true,\r\n  [actions.registerSuccess]: () => false,\r\n  [actions.registerError]: () => false,\r\n\r\n  [actions.loginRequest]: () => true,\r\n  [actions.loginSuccess]: () => false,\r\n  [actions.loginError]: () => false,\r\n\r\n  [actions.logoutRequest]: () => true,\r\n  [actions.logoutSuccess]: () => false,\r\n  [actions.logoutError]: () => false,\r\n\r\n  [actions.getCurrentUserRequest]: () => true,\r\n  [actions.getCurrentUserSuccess]: () => false,\r\n  [actions.getCurrentUserError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [actions.registerError]: (state, { payload }) => payload,\r\n  [actions.loginError]: (state, { payload }) => payload,\r\n  [actions.logoutError]: (state, { payload }) => payload,\r\n  [actions.getCurrentUserError]: (state, { payload }) => payload,\r\n});\r\n\r\nconst auth = combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  loading,\r\n  error,\r\n});\r\n\r\nexport default auth;\r\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\n// Actions\r\nimport * as authActions from '../auth/authActions';\r\nimport * as contactsActions from './contactsActions';\r\n\r\nconst itemsInitialState = [];\r\nconst items = createReducer(itemsInitialState, {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: (state, action) => [...state, action.payload],\r\n  [contactsActions.deleteContactSuccess]: (state, action) => state.filter(item => item.id !== action.payload),\r\n\r\n  [authActions.logoutSuccess]: () => itemsInitialState,\r\n});\r\n\r\nconst filterInitialState = '';\r\nconst filter = createReducer(filterInitialState, {\r\n  [contactsActions.changeFilter]: (state, action) => action.payload,\r\n\r\n  [authActions.logoutSuccess]: () => filterInitialState,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchContactsRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n\r\n  [contactsActions.deleteContactRequest]: () => true,\r\n  [contactsActions.deleteContactSuccess]: () => false,\r\n  [contactsActions.deleteContactError]: () => false,\r\n});\r\n\r\nconst errorInitialState = null;\r\nconst error = createReducer(errorInitialState, {\r\n  [contactsActions.fetchContactsError]: (state, action) => action.payload,\r\n  [contactsActions.addContactError]: (state, action) => action.payload,\r\n  [contactsActions.deleteContactError]: (state, action) => action.payload,\r\n\r\n  [contactsActions.fetchContactsRequest]: () => errorInitialState,\r\n  [contactsActions.addContactRequest]: () => errorInitialState,\r\n  [contactsActions.deleteContactRequest]: () => errorInitialState,\r\n  [contactsActions.changeFilter]: () => errorInitialState,\r\n});\r\n\r\nconst contacts = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\nexport default contacts;\r\n","import { combineReducers, configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// Persist (localStorage)\r\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n// Reducers\r\nimport authReducer from './auth/authReducers';\r\nimport contactsReducer from './contacts/contactsReducers';\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst reducer = combineReducers({\r\n  auth: persistReducer(authPersistConfig, authReducer),\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst myMiddleware = store => next => action => {\r\n  console.log(action);\r\n  next(action);\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  myMiddleware,\r\n];\r\n\r\nexport const store = configureStore({\r\n  reducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","const routes = {\r\n  home: '/',\r\n  register: '/register',\r\n  login: '/login',\r\n  contacts: '/contacts',\r\n};\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n// Styles\r\nimport './Authorization.scss';\r\n// Others\r\nimport routes from '../../../routes';\r\n\r\nconst Authorization = ({ moveTo, navLinkActiveStyle }) => (\r\n  <div className=\"register-login-block\">\r\n    <NavLink to={moveTo(routes.register)} className=\"navlink register-navlink\" activeStyle={navLinkActiveStyle}>\r\n      Register\r\n    </NavLink>\r\n    <NavLink to={moveTo(routes.login)} className=\"navlink login-navlink\" activeStyle={navLinkActiveStyle}>\r\n      Login\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default Authorization;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\n// Styles\r\nimport './UserMenu.scss';\r\n// Selectors\r\nimport { getUserEmail } from '../../../redux-toolkit/auth/authSelectors';\r\n// Operations\r\nimport { logout } from '../../../redux-toolkit/auth/authOperations';\r\n\r\nconst UserMenu = () => {\r\n  const email = useSelector(state => getUserEmail(state));\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <div className=\"UserMenu\">\r\n      <p className=\"user-email\">{email}</p>\r\n      <button type=\"button\" onClick={() => dispatch(logout())}>\r\n        Logout\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserMenu;\r\n","import { useSelector } from 'react-redux';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\n// Styles\r\nimport './Header.scss';\r\n// Components\r\nimport Authorization from './Authorization/Authorization';\r\nimport UserMenu from './UserMenu/UserMenu';\r\n// Selectors\r\nimport { getIsAuthenticated } from '../../redux-toolkit/auth/authSelectors';\r\n// Others\r\nimport routes from '../../routes';\r\n\r\nconst Header = ({ location }) => {\r\n  const isAuthenticated = useSelector(state => getIsAuthenticated(state));\r\n\r\n  const moveTo = pathname => ({\r\n    pathname,\r\n    state: { from: location },\r\n  });\r\n\r\n  const navLinkActiveStyle = { color: 'red' };\r\n\r\n  return (\r\n    <header className=\"Header\">\r\n      <nav>\r\n        <NavLink exact to={moveTo(routes.home)} className=\"logo\" activeStyle={navLinkActiveStyle}>\r\n          Phonebook\r\n        </NavLink>\r\n        {isAuthenticated ? (\r\n          <NavLink to={moveTo(routes.contacts)} className=\"contacts-navlink\" activeStyle={navLinkActiveStyle}>\r\n            Contacts\r\n          </NavLink>\r\n        ) : (\r\n          <p className=\"contacts-text\">Contacts</p>\r\n        )}\r\n        {isAuthenticated ? <UserMenu /> : <Authorization moveTo={moveTo} navLinkActiveStyle={navLinkActiveStyle} />}\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n// Selectors\r\nimport { getIsAuthenticated } from '../redux-toolkit/auth/authSelectors';\r\n\r\nconst PrivateRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector(state => getIsAuthenticated(state));\r\n\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={props => (isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { Route, Redirect } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n// Selectors\r\nimport { getIsAuthenticated } from '../redux-toolkit/auth/authSelectors';\r\n\r\nconst PublicRoute = ({ component: Component, redirectTo, ...routeProps }) => {\r\n  const isAuthenticated = useSelector(state => getIsAuthenticated(state));\r\n\r\n  return (\r\n    <Route\r\n      {...routeProps}\r\n      render={props =>\r\n        isAuthenticated && routeProps.restricted ? <Redirect to={redirectTo} /> : <Component {...props} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import { Suspense, lazy, useEffect } from 'react';\nimport { useDispatch /*useSelector*/ } from 'react-redux';\nimport { Redirect, Route, Switch /*useHistory*/ } from 'react-router-dom';\n// Styles\nimport './App.scss';\n// Components\nimport Header from './Components/Header/Header';\nimport PrivateRoute from './Components/PrivateRoute';\nimport PublicRoute from './Components/PublicRoute';\n// Oprerations\nimport { getCurrentUser } from './redux-toolkit/auth/authOperations';\n//Selectors\n// import { getIsAuthenticated } from './redux-toolkit/auth/authSelectors';\n// Others\nimport routes from './routes';\n// Pages\nconst HomePage = lazy(() => import('./Pages/HomePage'));\nconst RegisterPage = lazy(() => import('./Pages/RegisterPage'));\nconst LoginPage = lazy(() => import('./Pages/LoginPage'));\nconst ContactsPage = lazy(() => import('./Pages/ContactsPage'));\n\nconst App = () => {\n  // const isAuthenticated = useSelector(state => getIsAuthenticated(state));\n  const dispatch = useDispatch();\n  // const history = useHistory(); // вроде как не нужен\n\n  useEffect(() => {\n    dispatch(getCurrentUser());\n    // isAuthenticated && history.push(routes.contacts);\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Suspense fallback={<p>Loading...</p>}>\n        <Switch>\n          <Route exact path={routes.home} component={HomePage} />\n          <PrivateRoute path={routes.contacts} component={ContactsPage} redirectTo={routes.login} />\n          <PublicRoute path={routes.register} component={RegisterPage} redirectTo={routes.contacts} restricted />\n          <PublicRoute path={routes.login} component={LoginPage} redirectTo={routes.contacts} restricted />\n          <Redirect to={routes.home} />\n        </Switch>\n      </Suspense>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux-toolkit/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<p>Loading...</p>} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}